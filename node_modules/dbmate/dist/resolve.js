"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var path_1 = require("path");
var fs_1 = require("fs");
function isMusl() {
    var output = child_process_1.spawnSync('ldd', ['--version']).stderr.toString();
    return output.indexOf('musl') >= 0;
}
function archName() {
    switch (process.arch) {
        case 'x64':
            return 'amd64';
        case 'arm64':
            return 'arm64';
        default:
            throw new Error("Unsupported architecture " + process.arch);
    }
}
function platformName() {
    switch (process.platform) {
        case 'darwin':
            return 'macos';
        case 'linux':
            return isMusl ? 'linux-musl' : 'linux';
        default:
            throw new Error("Unsupported platform: " + process.platform);
    }
}
/** Return a path to the dbmate binary */
function calculateBinaryPath() {
    var binaryName = "dbmate-" + platformName() + "-" + archName();
    var binaryPath = path_1.join(__dirname, '..', 'binaries', binaryName);
    if (!fs_1.existsSync(binaryPath)) {
        throw new Error("Could not locate binary: " + binaryPath);
    }
    return binaryPath;
}
exports.calculateBinaryPath = calculateBinaryPath;
